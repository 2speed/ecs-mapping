filter {
    # ============================================================
    # Ruby : ECS Mapping
    # ============================================================
    ruby {
        code => '
            event_h = event.to_hash

            event_h.each { |key, _|
                if key != "@timestamp" && key != "@version"
                    event.remove(key)
                else
                    event_h.delete(key)
                end
            }

            # ECS : root
            # ====================
            ecs = Hash.new

            ecs["ecs"] = {
                "version" => "1.0.4"
            }

            # ECS : destination
            # ========================================
            ecs["destination"] = {
                "address" => event_h.delete("DestinationHostname"),
                "ip"      => event_h.delete("DestinationIp"),
                "port"    => event_h.has_key?("DestinationPort") ? event_h.delete("DestinationPort").to_i : nil
            }.compact

            # ECS : event
            # ========================================
            ecs["event"] = {
                "category" => event_h.delete("Category"),
                "code"     => event_h.has_key?("EventID") ? event_h.delete("EventID").to_s : nil,
                "created"  => event_h.delete("EventReceivedTime"),
                "dataset"  => "eventlog",
                "end"      => event_h["EventTime"],
                "kind"     => "event",
                "module"   => event_h.delete("SourceModuleName"),
                "provider" => event_h.delete("SourceName"),
                "sequence" => event_h.delete("RecordNumber"),
                "severity" => event_h.delete("SeverityValue"),
                "start"    => event_h.delete("EventTime"),
                "type"     => event_h.delete("EventType")
            }.compact

            # ECS : file
            # ========================================
            fileHashes    = Hash.new
            rawFileHashes = event_h.delete("Hashes")

            if rawFileHashes != nil
                hashes = rawFileHashes.strip.split(",")

                if hashes.length > 0
                    hashes
                        .map { |s| s.split("=") }
                        .select { |p| p.length == 2 }
                        .each { |p| fileHashes["#{p[0].downcase}"] = p[1] }
                end
            end

            ecs["file"] = {
                "hash" => fileHashes.size > 0 ? fileHashes : nil,
                "path" => event_h.delete("Image")
            }.compact

            # ECS : host
            # ========================================
            ecs["host"] = {
                "hostname" => event_h.delete("Hostname"),
                "name"     => event_h.delete("FQDN")
            }.compact

            # ECS : log
            # ========================================
            ecs["log"] = {
                "level" => event_h.delete("Severity")
            }.compact

            # ECS : message
            # ========================================
            ecs["message"] = event_h.delete("Message")

            # ECS : process
            # ========================================
            ecs["process"] = {
                "pid" => event_h.delete("ExecutionProcessID")
            }.compact

            thread = {
                "id" => event_h.delete("ExecutionThreadID")
            }.compact

            if !thread.nil? && !thread.empty?
                ecs["process"]["thread"] = thread
            end

            # ECS : source
            # ========================================
            ecs["source"] = {
                "address" => event_h.delete("SourceHostname"),
                "ip"      => event_h.delete("SourceIp"),
                "port"    => event_h.has_key?("SourcePort") ? event_h.delete("SourcePort").to_i : nil
            }.compact

            # ECS : tags
            # ========================================
            ecs["tags"] = nil

            # ECS : user
            # ========================================
            ecs["user"] = {
                "domain" => event_h.delete("Domain"),
                "id"     => event_h.delete("UserID")
            }.compact

            # ECS : event_data
            # ========================================
            ecs["event_data"] = Hash.new.merge(event_h)

            ecs.compact.each { |k, v|
                if v.kind_of?(Hash) && !v.empty?
                    event.set(k, v)
                end
            }
        '
    }

    # Date : @timestamp
    # ========================================
    date {
        match    => ["[event][start]", "yyyy-MM-dd HH:mm:ss.SSSSSSZ", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss.SSS"]
        timezone => "Etc/UTC"
        target   => "@timestamp"
    }

    # Date : event.start
    # ========================================
    date {
        match    => ["[event][start]", "yyyy-MM-dd HH:mm:ss.SSSSSSZ", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss.SSS"]
        timezone => "Etc/UTC"
        target   => "[event][start]"
    }

    # Date : event.end
    # ========================================
    date {
        match    => ["[event][end]", "yyyy-MM-dd HH:mm:ss.SSSSSSZ", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss.SSS"]
        timezone => "Etc/UTC"
        target   => "[event][end]"
    }

    # Date : event.created
    # ========================================
    date {
        match    => ["[event][created]", "yyyy-MM-dd HH:mm:ss.SSSSSSZ", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss.SSS"]
        timezone => "Etc/UTC"
        target   => "[event][created]"
    }
}

